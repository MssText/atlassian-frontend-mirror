// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@atlaskit/design-system-explorations bg styles are generated correctly 1`] = `
"const backgroundColorMap = {
  disabled: css({
    backgroundColor: token('color.background.disabled', 'var(--ds-bg-fb)'),
  }),
  'inverse.subtle': css({
    backgroundColor: token(
      'color.background.inverse.subtle',
      'var(--ds-bg-fb)',
    ),
  }),
  input: css({
    backgroundColor: token('color.background.input', 'var(--ds-bg-fb)'),
  }),
  neutral: css({
    backgroundColor: token('color.background.neutral', 'var(--ds-bg-fb)'),
  }),
  'neutral.subtle': css({
    backgroundColor: token(
      'color.background.neutral.subtle',
      'var(--ds-bg-fb)',
    ),
  }),
  'neutral.bold': css({
    backgroundColor: token('color.background.neutral.bold', 'var(--ds-bg-fb)'),
  }),
  'brand.bold': css({
    backgroundColor: token('color.background.brand.bold', 'var(--ds-bg-fb)'),
  }),
  selected: css({
    backgroundColor: token('color.background.selected', 'var(--ds-bg-fb)'),
  }),
  'selected.bold': css({
    backgroundColor: token('color.background.selected.bold', 'var(--ds-bg-fb)'),
  }),
  danger: css({
    backgroundColor: token('color.background.danger', 'var(--ds-bg-fb)'),
  }),
  'danger.bold': css({
    backgroundColor: token('color.background.danger.bold', 'var(--ds-bg-fb)'),
  }),
  warning: css({
    backgroundColor: token('color.background.warning', 'var(--ds-bg-fb)'),
  }),
  'warning.bold': css({
    backgroundColor: token('color.background.warning.bold', 'var(--ds-bg-fb)'),
  }),
  success: css({
    backgroundColor: token('color.background.success', 'var(--ds-bg-fb)'),
  }),
  'success.bold': css({
    backgroundColor: token('color.background.success.bold', 'var(--ds-bg-fb)'),
  }),
  discovery: css({
    backgroundColor: token('color.background.discovery', 'var(--ds-bg-fb)'),
  }),
  'discovery.bold': css({
    backgroundColor: token(
      'color.background.discovery.bold',
      'var(--ds-bg-fb)',
    ),
  }),
  information: css({
    backgroundColor: token('color.background.information', 'var(--ds-bg-fb)'),
  }),
  'information.bold': css({
    backgroundColor: token(
      'color.background.information.bold',
      'var(--ds-bg-fb)',
    ),
  }),
  'color.blanket': css({
    backgroundColor: token('color.blanket', 'var(--ds-bg-fb)'),
  }),
  'color.blanket.selected': css({
    backgroundColor: token('color.blanket.selected', 'var(--ds-bg-fb)'),
  }),
  'color.blanket.danger': css({
    backgroundColor: token('color.blanket.danger', 'var(--ds-bg-fb)'),
  }),
  'elevation.surface': css({
    backgroundColor: token('elevation.surface', 'var(--ds-bg-fb)'),
  }),
  'elevation.surface.sunken': css({
    backgroundColor: token('elevation.surface.sunken', 'var(--ds-bg-fb)'),
  }),
  'elevation.surface.raised': css({
    backgroundColor: token('elevation.surface.raised', 'var(--ds-bg-fb)'),
  }),
  'elevation.surface.overlay': css({
    backgroundColor: token('elevation.surface.overlay', 'var(--ds-bg-fb)'),
  }),
};

type BackgroundColor = keyof typeof backgroundColorMap;
"
`;

exports[`@atlaskit/design-system-explorations border styles are generated correctly 1`] = `
"const borderColorMap = {
  'color.border': css({
    borderColor: token('color.border', 'var(--ds-bo-fb)'),
  }),
  bold: css({
    borderColor: token('color.border.bold', 'var(--ds-bo-fb)'),
  }),
  inverse: css({
    borderColor: token('color.border.inverse', 'var(--ds-bo-fb)'),
  }),
  focused: css({
    borderColor: token('color.border.focused', 'var(--ds-bo-fb)'),
  }),
  input: css({
    borderColor: token('color.border.input', 'var(--ds-bo-fb)'),
  }),
  disabled: css({
    borderColor: token('color.border.disabled', 'var(--ds-bo-fb)'),
  }),
  brand: css({
    borderColor: token('color.border.brand', 'var(--ds-bo-fb)'),
  }),
  selected: css({
    borderColor: token('color.border.selected', 'var(--ds-bo-fb)'),
  }),
  danger: css({
    borderColor: token('color.border.danger', 'var(--ds-bo-fb)'),
  }),
  warning: css({
    borderColor: token('color.border.warning', 'var(--ds-bo-fb)'),
  }),
  success: css({
    borderColor: token('color.border.success', 'var(--ds-bo-fb)'),
  }),
  discovery: css({
    borderColor: token('color.border.discovery', 'var(--ds-bo-fb)'),
  }),
  information: css({
    borderColor: token('color.border.information', 'var(--ds-bo-fb)'),
  }),
};

type BorderColor = keyof typeof borderColorMap;
"
`;

exports[`@atlaskit/design-system-explorations text styles are generated correctly 1`] = `
"const textColorMap = {
  'color.text': css({
    color: token('color.text', 'var(--ds-co-fb)'),
  }),
  subtle: css({
    color: token('color.text.subtle', 'var(--ds-co-fb)'),
  }),
  subtlest: css({
    color: token('color.text.subtlest', 'var(--ds-co-fb)'),
  }),
  disabled: css({
    color: token('color.text.disabled', 'var(--ds-co-fb)'),
  }),
  inverse: css({
    color: token('color.text.inverse', 'var(--ds-co-fb)'),
  }),
  brand: css({
    color: token('color.text.brand', 'var(--ds-co-fb)'),
  }),
  selected: css({
    color: token('color.text.selected', 'var(--ds-co-fb)'),
  }),
  danger: css({
    color: token('color.text.danger', 'var(--ds-co-fb)'),
  }),
  warning: css({
    color: token('color.text.warning', 'var(--ds-co-fb)'),
  }),
  'warning.inverse': css({
    color: token('color.text.warning.inverse', 'var(--ds-co-fb)'),
  }),
  success: css({
    color: token('color.text.success', 'var(--ds-co-fb)'),
  }),
  discovery: css({
    color: token('color.text.discovery', 'var(--ds-co-fb)'),
  }),
  information: css({
    color: token('color.text.information', 'var(--ds-co-fb)'),
  }),
};

type TextColor = keyof typeof textColorMap;
"
`;
